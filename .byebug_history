exit
remove_nil params.require(:article).permit(:title, :description)
def remove_nil(args)
    args.transform_values!{|x| x=nil if x.blank?}
  end
nilify params.require(:article).permit(:title, :description)
def nilify(p)
    p.transform_values!{|v| v.present? ? v : nil }
  end
remove_nil params.require(:article).permit(:title, :description)
remove_nil article_params
article_params
params
exit
params
@article.save
@article = Article.new(article_params)
params
if @article.save then puts 'yay' else puts 'no' end
@article = Article.new(article_params)
@article
params
exit
@article
exit
asdfasdf
@article.save
@article = Article.new(article_params)
@article
exit
@article.save
@article = Article.new(article_params)
@article
exit
@article
exit
if @article.save then redirect_to @article else render 'new'end
if @article.save then redirect_to @article else render 'new'ed 
if !!@article.save then puts 'yay' else puts 'non' end
if !!@article.save; puts 'yay' else puts 'non' end
if !!@article.save
if !!@article.save ? puts 'yay' : puts 'no'
!!@article.save ? puts 'yay' : puts 'no'
@article.save ? puts 'yay' : puts 'no'
if @article.save then puts 'yay' else puts 'no' end
user_params
params
if @article.save then puts 'yay' else puts 'no' end
exit
if @article.save then puts 'yay' else puts 'no' end
if @article.save then puts 'yay' else puts 'no'
if @article.save
if @article.save 
@article = Article.new(user_params)
exit
n
exit
article.title
article.update(paramsy)
article
article = Article.create
paramsy
paramsy = params.require(:article).permit(:title, :description)
params.require(:article).permit(:title, :description)
params.require(:article)
params
exit
params
exit
n
params[:article]
article.update(params[:article])
article.update(param[:article])
article = Article.find(params[:id])
params[:id]
params[:article][:title]
params[:article]
params
params[:articles]
params.values.values
params.values
params.keys.detect{|x| x=='article'}[0]
params.keys.detect{|x| x=='article'}
params.keys.detect(|x| x=='article')
params.keys
params
